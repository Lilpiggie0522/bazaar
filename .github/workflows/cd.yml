# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: continuous-deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  POSTGRES_URL: ${{secrets.POSTGRES_URL}}
  POSTGRES_PRISMA_URL: ${{secrets.POSTGRES_PRISMA_URL}}
  POSTGRES_URL_NO_SSL: ${{secrets.POSTGRES_URL_NO_SSL}}
  POSTGRES_URL_NON_POOLING: ${{secrets.POSTGRES_URL_NON_POOLING}}
  POSTGRES_USER: ${{secrets.POSTGRES_USER}}
  POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
  POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  POSTGRES_DATABASE: ${{secrets.POSTGRES_DATABASE}}

on:
  push:
    branches: [ "master" ]

jobs:
  deployment:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install
    - run: yarn lint
    - name: Install Vercel CLI
      run: yarn install --global vercel@latest
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}